/**
 * generated by Xtext
 */
package fr.irit.smac.may.speadl.formatting;

import com.google.inject.Inject;
import fr.irit.smac.may.speadl.services.SpeADLGrammarAccess;
import java.util.function.Consumer;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class SpeADLFormatter extends AbstractDeclarativeFormatter {
  @Inject
  @Extension
  private SpeADLGrammarAccess _speADLGrammarAccess;
  
  @Inject
  private XbaseGrammarAccess xbase;
  
  @Override
  protected void configureFormatting(final FormattingConfig c) {
    c.setLinewrap(0, 1, 2).before(this._speADLGrammarAccess.getSL_COMMENTRule());
    c.setLinewrap(0, 1, 2).before(this._speADLGrammarAccess.getML_COMMENTRule());
    c.setLinewrap(0, 1, 1).after(this._speADLGrammarAccess.getML_COMMENTRule());
    final Consumer<Pair<Keyword, Keyword>> _function = (Pair<Keyword, Keyword> p) -> {
      c.setNoSpace().around(p.getFirst());
      c.setNoSpace().before(p.getSecond());
    };
    this._speADLGrammarAccess.findKeywordPairs("(", ")").forEach(_function);
    final Consumer<Pair<Keyword, Keyword>> _function_1 = (Pair<Keyword, Keyword> p) -> {
      c.setNoSpace().around(p.getFirst());
      c.setNoSpace().before(p.getSecond());
    };
    this._speADLGrammarAccess.findKeywordPairs("[", "]").forEach(_function_1);
    final Consumer<Pair<Keyword, Keyword>> _function_2 = (Pair<Keyword, Keyword> p) -> {
      c.setLinewrap().after(p.getFirst());
      c.setIndentationIncrement().after(p.getFirst());
      c.setLinewrap().before(p.getSecond());
      c.setIndentationDecrement().before(p.getSecond());
    };
    this._speADLGrammarAccess.findKeywordPairs("{", "}").forEach(_function_2);
    final Consumer<Keyword> _function_3 = (Keyword k) -> {
      c.setNoSpace().before(k);
    };
    this._speADLGrammarAccess.findKeywords(",").forEach(_function_3);
    final Consumer<Keyword> _function_4 = (Keyword k) -> {
      c.setNoSpace().around(k);
    };
    this._speADLGrammarAccess.findKeywords(".").forEach(_function_4);
    final Consumer<Keyword> _function_5 = (Keyword k) -> {
      c.setNoSpace().before(k);
      c.setSpace(" ").after(k);
    };
    this._speADLGrammarAccess.findKeywords(":").forEach(_function_5);
    c.setLinewrap(1, 1, 2).around(this._speADLGrammarAccess.getEcosystemRule());
    c.setLinewrap(1, 1, 2).around(this._speADLGrammarAccess.getComponentRule());
    c.setLinewrap(1, 1, 2).around(this._speADLGrammarAccess.getNamespaceRule());
    c.setLinewrap(1, 1, 2).around(this._speADLGrammarAccess.getProvidedPortRule());
    c.setLinewrap(1, 1, 2).around(this._speADLGrammarAccess.getRequiredPortRule());
    c.setLinewrap(1, 1, 2).around(this._speADLGrammarAccess.getComponentPartRule());
    c.setLinewrap(1, 1, 2).around(this._speADLGrammarAccess.getSpeciesPartRule());
    c.setLinewrap(1, 1, 2).around(this._speADLGrammarAccess.getSpeciesRule());
    c.setLinewrap(1, 1, 2).around(this._speADLGrammarAccess.getBindingRule());
    c.setLinewrap().around(this.xbase.getXImportDeclarationRule());
    c.setLinewrap(2, 2, 2).after(this.xbase.getXImportSectionRule());
  }
}
