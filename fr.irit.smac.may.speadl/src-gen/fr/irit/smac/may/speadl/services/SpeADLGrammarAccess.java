/*
* generated by Xtext
*/
package fr.irit.smac.may.speadl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class SpeADLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsXImportSectionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsNamespaceParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//	imports=XImportSection? elements+=Namespace*;
		public ParserRule getRule() { return rule; }

		//imports=XImportSection? elements+=Namespace*
		public Group getGroup() { return cGroup; }

		//imports=XImportSection?
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//XImportSection
		public RuleCall getImportsXImportSectionParserRuleCall_0_0() { return cImportsXImportSectionParserRuleCall_0_0; }

		//elements+=Namespace*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Namespace
		public RuleCall getElementsNamespaceParserRuleCall_1_0() { return cElementsNamespaceParserRuleCall_1_0; }
	}

	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsModelElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Namespace:
		//	"namespace" name=QualifiedName "{" elements+=ModelElement* "}";
		public ParserRule getRule() { return rule; }

		//"namespace" name=QualifiedName "{" elements+=ModelElement* "}"
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=ModelElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//ModelElement
		public RuleCall getElementsModelElementParserRuleCall_3_0() { return cElementsModelElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamespaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModelElement:
		//	Namespace | Element;
		public ParserRule getRule() { return rule; }

		//Namespace | Element
		public Alternatives getAlternatives() { return cAlternatives; }

		//Namespace
		public RuleCall getNamespaceParserRuleCall_0() { return cNamespaceParserRuleCall_0; }

		//Element
		public RuleCall getElementParserRuleCall_1() { return cElementParserRuleCall_1; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEcosystemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Ecosystem | Component;
		public ParserRule getRule() { return rule; }

		//Ecosystem | Component
		public Alternatives getAlternatives() { return cAlternatives; }

		//Ecosystem
		public RuleCall getEcosystemParserRuleCall_0() { return cEcosystemParserRuleCall_0; }

		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}

	public class AbstractComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEcosystemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpeciesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractComponent:
		//	Ecosystem | Species;
		public ParserRule getRule() { return rule; }

		//Ecosystem | Species
		public Alternatives getAlternatives() { return cAlternatives; }

		//Ecosystem
		public RuleCall getEcosystemParserRuleCall_0() { return cEcosystemParserRuleCall_0; }

		//Species
		public RuleCall getSpeciesParserRuleCall_1() { return cSpeciesParserRuleCall_1; }
	}

	public class FakeAbstractComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FakeAbstractComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersFeatureParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_0 = (RuleCall)cTypeParametersAssignment_2.eContents().get(0);
		private final Assignment cSpecializesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecializesJvmParameterizedTypeReferenceParserRuleCall_3_0 = (RuleCall)cSpecializesAssignment_3.eContents().get(0);
		private final Assignment cProvidesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProvidesProvidedPortParserRuleCall_4_0 = (RuleCall)cProvidesAssignment_4.eContents().get(0);
		private final Assignment cRequiresAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRequiresRequiredPortParserRuleCall_5_0 = (RuleCall)cRequiresAssignment_5.eContents().get(0);
		private final Assignment cPartsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPartsPartParserRuleCall_6_0 = (RuleCall)cPartsAssignment_6.eContents().get(0);
		private final Assignment cSpeciesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSpeciesSpeciesParserRuleCall_7_0 = (RuleCall)cSpeciesAssignment_7.eContents().get(0);
		
		//FakeAbstractComponent returns AbstractComponent:
		//	name=ValidID parameters+=Feature typeParameters+=JvmTypeParameter specializes=JvmParameterizedTypeReference
		//	provides+=ProvidedPort requires+=RequiredPort parts+=Part species+=Species;
		public ParserRule getRule() { return rule; }

		//name=ValidID parameters+=Feature typeParameters+=JvmTypeParameter specializes=JvmParameterizedTypeReference
		//provides+=ProvidedPort requires+=RequiredPort parts+=Part species+=Species
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//parameters+=Feature
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//Feature
		public RuleCall getParametersFeatureParserRuleCall_1_0() { return cParametersFeatureParserRuleCall_1_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2() { return cTypeParametersAssignment_2; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_0; }

		//specializes=JvmParameterizedTypeReference
		public Assignment getSpecializesAssignment_3() { return cSpecializesAssignment_3; }

		//JvmParameterizedTypeReference
		public RuleCall getSpecializesJvmParameterizedTypeReferenceParserRuleCall_3_0() { return cSpecializesJvmParameterizedTypeReferenceParserRuleCall_3_0; }

		//provides+=ProvidedPort
		public Assignment getProvidesAssignment_4() { return cProvidesAssignment_4; }

		//ProvidedPort
		public RuleCall getProvidesProvidedPortParserRuleCall_4_0() { return cProvidesProvidedPortParserRuleCall_4_0; }

		//requires+=RequiredPort
		public Assignment getRequiresAssignment_5() { return cRequiresAssignment_5; }

		//RequiredPort
		public RuleCall getRequiresRequiredPortParserRuleCall_5_0() { return cRequiresRequiredPortParserRuleCall_5_0; }

		//parts+=Part
		public Assignment getPartsAssignment_6() { return cPartsAssignment_6; }

		//Part
		public RuleCall getPartsPartParserRuleCall_6_0() { return cPartsPartParserRuleCall_6_0; }

		//species+=Species
		public Assignment getSpeciesAssignment_7() { return cSpeciesAssignment_7; }

		//Species
		public RuleCall getSpeciesSpeciesParserRuleCall_7_0() { return cSpeciesSpeciesParserRuleCall_7_0; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProvidedPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Port:
		//	ProvidedPort | RequiredPort;
		public ParserRule getRule() { return rule; }

		//ProvidedPort | RequiredPort
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProvidedPort
		public RuleCall getProvidedPortParserRuleCall_0() { return cProvidedPortParserRuleCall_0; }

		//RequiredPort
		public RuleCall getRequiredPortParserRuleCall_1() { return cRequiredPortParserRuleCall_1; }
	}

	public class FakeAbstractPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FakeAbstractPort");
		private final Assignment cTypeReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeReferenceJvmParameterizedTypeReferenceParserRuleCall_0 = (RuleCall)cTypeReferenceAssignment.eContents().get(0);
		
		//FakeAbstractPort returns Port:
		//	typeReference=JvmParameterizedTypeReference;
		public ParserRule getRule() { return rule; }

		//typeReference=JvmParameterizedTypeReference
		public Assignment getTypeReferenceAssignment() { return cTypeReferenceAssignment; }

		//JvmParameterizedTypeReference
		public RuleCall getTypeReferenceJvmParameterizedTypeReferenceParserRuleCall_0() { return cTypeReferenceJvmParameterizedTypeReferenceParserRuleCall_0; }
	}

	public class ContentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContentElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Used to check for name duplicate!
		//ContentElement:
		//	Port | Part;
		public ParserRule getRule() { return rule; }

		//Port | Part
		public Alternatives getAlternatives() { return cAlternatives; }

		//Port
		public RuleCall getPortParserRuleCall_0() { return cPortParserRuleCall_0; }

		//Part
		public RuleCall getPartParserRuleCall_1() { return cPartParserRuleCall_1; }
	}

	public class FakeContentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FakeContentElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FakeContentElement returns ContentElement:
		//	name=ValidID;
		public ParserRule getRule() { return rule; }

		//name=ValidID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0() { return cNameValidIDParserRuleCall_0; }
	}

	public class PartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Part");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentPartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpeciesPartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Part:
		//	ComponentPart | SpeciesPart;
		public ParserRule getRule() { return rule; }

		//ComponentPart | SpeciesPart
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentPart
		public RuleCall getComponentPartParserRuleCall_0() { return cComponentPartParserRuleCall_0; }

		//SpeciesPart
		public RuleCall getSpeciesPartParserRuleCall_1() { return cSpeciesPartParserRuleCall_1; }
	}

	public class FakePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FakePart");
		private final Assignment cBindingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_0 = (RuleCall)cBindingsAssignment.eContents().get(0);
		
		//FakePart returns Part:
		//	bindings+=Binding;
		public ParserRule getRule() { return rule; }

		//bindings+=Binding
		public Assignment getBindingsAssignment() { return cBindingsAssignment; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_0() { return cBindingsBindingParserRuleCall_0; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cParameterTypeAssignment_2.eContents().get(0);
		
		//Feature:
		//	name=ValidID ":" parameterType=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//name=ValidID ":" parameterType=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2() { return cParameterTypeAssignment_2; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_0; }
	}

	public class EcosystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ecosystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEcosystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_1_0 = (RuleCall)cTypeParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0 = (RuleCall)cTypeParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSpecializesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSpecializesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSpecializesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSpecializesAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cProvidesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cProvidesProvidedPortParserRuleCall_5_0_0 = (RuleCall)cProvidesAssignment_5_0.eContents().get(0);
		private final Assignment cRequiresAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cRequiresRequiredPortParserRuleCall_5_1_0 = (RuleCall)cRequiresAssignment_5_1.eContents().get(0);
		private final Assignment cPartsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cPartsComponentPartParserRuleCall_5_2_0 = (RuleCall)cPartsAssignment_5_2.eContents().get(0);
		private final Assignment cSpeciesAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cSpeciesSpeciesParserRuleCall_5_3_0 = (RuleCall)cSpeciesAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// another element is introduced here because SpeADLProposalProvider
		//// can't make the difference between specializes and implementedBy
		////ImplementedBy:
		////	"implementedBy" ref=JvmParameterizedTypeReference
		////;
		//Ecosystem:
		//	"ecosystem" name=ValidID ("[" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* "]")?
		//	("specializes" specializes=JvmParameterizedTypeReference)? //implementedBy=ImplementedBy?
		//	"{" (provides+=ProvidedPort | requires+=RequiredPort | parts+=ComponentPart | species+=Species)* "}";
		public ParserRule getRule() { return rule; }

		//"ecosystem" name=ValidID ("[" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* "]")?
		//("specializes" specializes=JvmParameterizedTypeReference)? //implementedBy=ImplementedBy?
		//"{" (provides+=ProvidedPort | requires+=RequiredPort | parts+=ComponentPart | species+=Species)* "}"
		public Group getGroup() { return cGroup; }

		//"ecosystem"
		public Keyword getEcosystemKeyword_0() { return cEcosystemKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("[" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_1() { return cTypeParametersAssignment_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_2_1() { return cTypeParametersAssignment_2_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }

		//("specializes" specializes=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"specializes"
		public Keyword getSpecializesKeyword_3_0() { return cSpecializesKeyword_3_0; }

		//specializes=JvmParameterizedTypeReference
		public Assignment getSpecializesAssignment_3_1() { return cSpecializesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSpecializesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSpecializesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		////implementedBy=ImplementedBy?
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(provides+=ProvidedPort | requires+=RequiredPort | parts+=ComponentPart | species+=Species)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//provides+=ProvidedPort
		public Assignment getProvidesAssignment_5_0() { return cProvidesAssignment_5_0; }

		//ProvidedPort
		public RuleCall getProvidesProvidedPortParserRuleCall_5_0_0() { return cProvidesProvidedPortParserRuleCall_5_0_0; }

		//requires+=RequiredPort
		public Assignment getRequiresAssignment_5_1() { return cRequiresAssignment_5_1; }

		//RequiredPort
		public RuleCall getRequiresRequiredPortParserRuleCall_5_1_0() { return cRequiresRequiredPortParserRuleCall_5_1_0; }

		//parts+=ComponentPart
		public Assignment getPartsAssignment_5_2() { return cPartsAssignment_5_2; }

		//ComponentPart
		public RuleCall getPartsComponentPartParserRuleCall_5_2_0() { return cPartsComponentPartParserRuleCall_5_2_0; }

		//species+=Species
		public Assignment getSpeciesAssignment_5_3() { return cSpeciesAssignment_5_3; }

		//Species
		public RuleCall getSpeciesSpeciesParserRuleCall_5_3_0() { return cSpeciesSpeciesParserRuleCall_5_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_1_0 = (RuleCall)cTypeParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0 = (RuleCall)cTypeParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSpecializesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSpecializesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSpecializesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSpecializesAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cProvidesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cProvidesProvidedPortParserRuleCall_5_0_0 = (RuleCall)cProvidesAssignment_5_0.eContents().get(0);
		private final Assignment cRequiresAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cRequiresRequiredPortParserRuleCall_5_1_0 = (RuleCall)cRequiresAssignment_5_1.eContents().get(0);
		private final Assignment cPartsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cPartsComponentPartParserRuleCall_5_2_0 = (RuleCall)cPartsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Component returns Ecosystem:
		//	"component" name=ValidID ("[" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* "]")?
		//	("specializes" specializes=JvmParameterizedTypeReference)? //implementedBy=ImplementedBy?
		//	"{" (provides+=ProvidedPort | requires+=RequiredPort | parts+=ComponentPart)* "}";
		public ParserRule getRule() { return rule; }

		//"component" name=ValidID ("[" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* "]")?
		//("specializes" specializes=JvmParameterizedTypeReference)? //implementedBy=ImplementedBy?
		//"{" (provides+=ProvidedPort | requires+=RequiredPort | parts+=ComponentPart)* "}"
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("[" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_1() { return cTypeParametersAssignment_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_2_1() { return cTypeParametersAssignment_2_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }

		//("specializes" specializes=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"specializes"
		public Keyword getSpecializesKeyword_3_0() { return cSpecializesKeyword_3_0; }

		//specializes=JvmParameterizedTypeReference
		public Assignment getSpecializesAssignment_3_1() { return cSpecializesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSpecializesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSpecializesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		////implementedBy=ImplementedBy?
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(provides+=ProvidedPort | requires+=RequiredPort | parts+=ComponentPart)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//provides+=ProvidedPort
		public Assignment getProvidesAssignment_5_0() { return cProvidesAssignment_5_0; }

		//ProvidedPort
		public RuleCall getProvidesProvidedPortParserRuleCall_5_0_0() { return cProvidesProvidedPortParserRuleCall_5_0_0; }

		//requires+=RequiredPort
		public Assignment getRequiresAssignment_5_1() { return cRequiresAssignment_5_1; }

		//RequiredPort
		public RuleCall getRequiresRequiredPortParserRuleCall_5_1_0() { return cRequiresRequiredPortParserRuleCall_5_1_0; }

		//parts+=ComponentPart
		public Assignment getPartsAssignment_5_2() { return cPartsAssignment_5_2; }

		//ComponentPart
		public RuleCall getPartsComponentPartParserRuleCall_5_2_0() { return cPartsComponentPartParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class SpeciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Species");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpeciesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersFeatureParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParametersFeatureParserRuleCall_2_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cProvidesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cProvidesProvidedPortParserRuleCall_4_0_0 = (RuleCall)cProvidesAssignment_4_0.eContents().get(0);
		private final Assignment cRequiresAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cRequiresRequiredPortParserRuleCall_4_1_0 = (RuleCall)cRequiresAssignment_4_1.eContents().get(0);
		private final Assignment cPartsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cPartsPartParserRuleCall_4_2_0 = (RuleCall)cPartsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Species:
		//	"species" name=ValidID ("(" (parameters+=Feature ("," parameters+=Feature)*)? ")")? "{" (provides+=ProvidedPort |
		//	requires+=RequiredPort | parts+=Part)* "}";
		public ParserRule getRule() { return rule; }

		//"species" name=ValidID ("(" (parameters+=Feature ("," parameters+=Feature)*)? ")")? "{" (provides+=ProvidedPort |
		//requires+=RequiredPort | parts+=Part)* "}"
		public Group getGroup() { return cGroup; }

		//"species"
		public Keyword getSpeciesKeyword_0() { return cSpeciesKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("(" (parameters+=Feature ("," parameters+=Feature)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameters+=Feature ("," parameters+=Feature)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameters+=Feature
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }

		//Feature
		public RuleCall getParametersFeatureParserRuleCall_2_1_0_0() { return cParametersFeatureParserRuleCall_2_1_0_0; }

		//("," parameters+=Feature)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameters+=Feature
		public Assignment getParametersAssignment_2_1_1_1() { return cParametersAssignment_2_1_1_1; }

		//Feature
		public RuleCall getParametersFeatureParserRuleCall_2_1_1_1_0() { return cParametersFeatureParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(provides+=ProvidedPort | requires+=RequiredPort | parts+=Part)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//provides+=ProvidedPort
		public Assignment getProvidesAssignment_4_0() { return cProvidesAssignment_4_0; }

		//ProvidedPort
		public RuleCall getProvidesProvidedPortParserRuleCall_4_0_0() { return cProvidesProvidedPortParserRuleCall_4_0_0; }

		//requires+=RequiredPort
		public Assignment getRequiresAssignment_4_1() { return cRequiresAssignment_4_1; }

		//RequiredPort
		public RuleCall getRequiresRequiredPortParserRuleCall_4_1_0() { return cRequiresRequiredPortParserRuleCall_4_1_0; }

		//parts+=Part
		public Assignment getPartsAssignment_4_2() { return cPartsAssignment_4_2; }

		//Part
		public RuleCall getPartsPartParserRuleCall_4_2_0() { return cPartsPartParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ProvidedPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidedPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProvidesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeReferenceJvmParameterizedTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeReferenceAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBoundAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBoundPortRefParserRuleCall_4_1_0 = (RuleCall)cBoundAssignment_4_1.eContents().get(0);
		
		//ProvidedPort:
		//	"provides" name=ValidID ":" typeReference=JvmParameterizedTypeReference ("=" bound=PortRef)?;
		public ParserRule getRule() { return rule; }

		//"provides" name=ValidID ":" typeReference=JvmParameterizedTypeReference ("=" bound=PortRef)?
		public Group getGroup() { return cGroup; }

		//"provides"
		public Keyword getProvidesKeyword_0() { return cProvidesKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//typeReference=JvmParameterizedTypeReference
		public Assignment getTypeReferenceAssignment_3() { return cTypeReferenceAssignment_3; }

		//JvmParameterizedTypeReference
		public RuleCall getTypeReferenceJvmParameterizedTypeReferenceParserRuleCall_3_0() { return cTypeReferenceJvmParameterizedTypeReferenceParserRuleCall_3_0; }

		//("=" bound=PortRef)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//bound=PortRef
		public Assignment getBoundAssignment_4_1() { return cBoundAssignment_4_1; }

		//PortRef
		public RuleCall getBoundPortRefParserRuleCall_4_1_0() { return cBoundPortRefParserRuleCall_4_1_0; }
	}

	public class RequiredPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeReferenceJvmParameterizedTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeReferenceAssignment_3.eContents().get(0);
		
		//RequiredPort:
		//	"requires" name=ValidID ":" typeReference=JvmParameterizedTypeReference;
		public ParserRule getRule() { return rule; }

		//"requires" name=ValidID ":" typeReference=JvmParameterizedTypeReference
		public Group getGroup() { return cGroup; }

		//"requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//typeReference=JvmParameterizedTypeReference
		public Assignment getTypeReferenceAssignment_3() { return cTypeReferenceAssignment_3; }

		//JvmParameterizedTypeReference
		public RuleCall getTypeReferenceJvmParameterizedTypeReferenceParserRuleCall_3_0() { return cTypeReferenceJvmParameterizedTypeReferenceParserRuleCall_3_0; }
	}

	public class ComponentPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentReferenceJvmParameterizedTypeReferenceParserRuleCall_3_0 = (RuleCall)cComponentReferenceAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBindingsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_4_1_0 = (RuleCall)cBindingsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//ComponentPart:
		//	"part" name=ValidID ":" componentReference=JvmParameterizedTypeReference ("{" bindings+=Binding* "}")?;
		public ParserRule getRule() { return rule; }

		//"part" name=ValidID ":" componentReference=JvmParameterizedTypeReference ("{" bindings+=Binding* "}")?
		public Group getGroup() { return cGroup; }

		//"part"
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//componentReference=JvmParameterizedTypeReference
		public Assignment getComponentReferenceAssignment_3() { return cComponentReferenceAssignment_3; }

		//JvmParameterizedTypeReference
		public RuleCall getComponentReferenceJvmParameterizedTypeReferenceParserRuleCall_3_0() { return cComponentReferenceJvmParameterizedTypeReferenceParserRuleCall_3_0; }

		//("{" bindings+=Binding* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//bindings+=Binding*
		public Assignment getBindingsAssignment_4_1() { return cBindingsAssignment_4_1; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_4_1_0() { return cBindingsBindingParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class SpeciesPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpeciesPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeciesReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeciesReferenceSpeciesReferenceParserRuleCall_3_0 = (RuleCall)cSpeciesReferenceAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBindingsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_4_1_0 = (RuleCall)cBindingsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//SpeciesPart:
		//	"use" name=ValidID ":" speciesReference=SpeciesReference ("{" bindings+=Binding* "}")?;
		public ParserRule getRule() { return rule; }

		//"use" name=ValidID ":" speciesReference=SpeciesReference ("{" bindings+=Binding* "}")?
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//speciesReference=SpeciesReference
		public Assignment getSpeciesReferenceAssignment_3() { return cSpeciesReferenceAssignment_3; }

		//SpeciesReference
		public RuleCall getSpeciesReferenceSpeciesReferenceParserRuleCall_3_0() { return cSpeciesReferenceSpeciesReferenceParserRuleCall_3_0; }

		//("{" bindings+=Binding* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//bindings+=Binding*
		public Assignment getBindingsAssignment_4_1() { return cBindingsAssignment_4_1; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_4_1_0() { return cBindingsBindingParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFromRequiredPortCrossReference_1_0 = (CrossReference)cFromAssignment_1.eContents().get(0);
		private final RuleCall cFromRequiredPortIDTerminalRuleCall_1_0_1 = (RuleCall)cFromRequiredPortCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToPortRefParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		
		//Binding:
		//	"bind" from=[RequiredPort] "to" to=PortRef;
		public ParserRule getRule() { return rule; }

		//"bind" from=[RequiredPort] "to" to=PortRef
		public Group getGroup() { return cGroup; }

		//"bind"
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }

		//from=[RequiredPort]
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }

		//[RequiredPort]
		public CrossReference getFromRequiredPortCrossReference_1_0() { return cFromRequiredPortCrossReference_1_0; }

		//ID
		public RuleCall getFromRequiredPortIDTerminalRuleCall_1_0_1() { return cFromRequiredPortIDTerminalRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//to=PortRef
		public Assignment getToAssignment_3() { return cToAssignment_3; }

		//PortRef
		public RuleCall getToPortRefParserRuleCall_3_0() { return cToPortRefParserRuleCall_3_0; }
	}

	public class PortRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEcosystemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEcosystemEcoKeyword_0_0 = (Keyword)cEcosystemAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPartAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cPartPartCrossReference_1_0_0 = (CrossReference)cPartAssignment_1_0.eContents().get(0);
		private final RuleCall cPartPartValidIDParserRuleCall_1_0_0_1 = (RuleCall)cPartPartCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPortPortCrossReference_2_0 = (CrossReference)cPortAssignment_2.eContents().get(0);
		private final RuleCall cPortPortValidIDParserRuleCall_2_0_1 = (RuleCall)cPortPortCrossReference_2_0.eContents().get(1);
		
		//PortRef:
		//	ecosystem?="eco"? // I don't know why but without ()?, eco seems to be mandatory...
		//	(part=[Part|ValidID] ".")? port=[Port|ValidID];
		public ParserRule getRule() { return rule; }

		//ecosystem?="eco"? // I don't know why but without ()?, eco seems to be mandatory...
		//(part=[Part|ValidID] ".")? port=[Port|ValidID]
		public Group getGroup() { return cGroup; }

		//ecosystem?="eco"?
		public Assignment getEcosystemAssignment_0() { return cEcosystemAssignment_0; }

		//"eco"
		public Keyword getEcosystemEcoKeyword_0_0() { return cEcosystemEcoKeyword_0_0; }

		//(part=[Part|ValidID] ".")?
		public Group getGroup_1() { return cGroup_1; }

		//part=[Part|ValidID]
		public Assignment getPartAssignment_1_0() { return cPartAssignment_1_0; }

		//[Part|ValidID]
		public CrossReference getPartPartCrossReference_1_0_0() { return cPartPartCrossReference_1_0_0; }

		//ValidID
		public RuleCall getPartPartValidIDParserRuleCall_1_0_0_1() { return cPartPartValidIDParserRuleCall_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//port=[Port|ValidID]
		public Assignment getPortAssignment_2() { return cPortAssignment_2; }

		//[Port|ValidID]
		public CrossReference getPortPortCrossReference_2_0() { return cPortPortCrossReference_2_0; }

		//ValidID
		public RuleCall getPortPortValidIDParserRuleCall_2_0_1() { return cPortPortValidIDParserRuleCall_2_0_1; }
	}

	public class SpeciesReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpeciesReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPartComponentPartCrossReference_0_0 = (CrossReference)cPartAssignment_0.eContents().get(0);
		private final RuleCall cPartComponentPartValidIDParserRuleCall_0_0_1 = (RuleCall)cPartComponentPartCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeciesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSpeciesSpeciesCrossReference_2_0 = (CrossReference)cSpeciesAssignment_2.eContents().get(0);
		private final RuleCall cSpeciesSpeciesValidIDParserRuleCall_2_0_1 = (RuleCall)cSpeciesSpeciesCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final CrossReference cArgumentsFeatureCrossReference_3_1_0_0 = (CrossReference)cArgumentsAssignment_3_1_0.eContents().get(0);
		private final RuleCall cArgumentsFeatureValidIDParserRuleCall_3_1_0_0_1 = (RuleCall)cArgumentsFeatureCrossReference_3_1_0_0.eContents().get(1);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final CrossReference cArgumentsFeatureCrossReference_3_1_1_1_0 = (CrossReference)cArgumentsAssignment_3_1_1_1.eContents().get(0);
		private final RuleCall cArgumentsFeatureValidIDParserRuleCall_3_1_1_1_0_1 = (RuleCall)cArgumentsFeatureCrossReference_3_1_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SpeciesReference:
		//	part=[ComponentPart|ValidID] "." species=[Species|ValidID] ("(" (arguments+=[Feature|ValidID] (","
		//	arguments+=[Feature|ValidID])*)? ")")?;
		public ParserRule getRule() { return rule; }

		//part=[ComponentPart|ValidID] "." species=[Species|ValidID] ("(" (arguments+=[Feature|ValidID] (","
		//arguments+=[Feature|ValidID])*)? ")")?
		public Group getGroup() { return cGroup; }

		//part=[ComponentPart|ValidID]
		public Assignment getPartAssignment_0() { return cPartAssignment_0; }

		//[ComponentPart|ValidID]
		public CrossReference getPartComponentPartCrossReference_0_0() { return cPartComponentPartCrossReference_0_0; }

		//ValidID
		public RuleCall getPartComponentPartValidIDParserRuleCall_0_0_1() { return cPartComponentPartValidIDParserRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//species=[Species|ValidID]
		public Assignment getSpeciesAssignment_2() { return cSpeciesAssignment_2; }

		//[Species|ValidID]
		public CrossReference getSpeciesSpeciesCrossReference_2_0() { return cSpeciesSpeciesCrossReference_2_0; }

		//ValidID
		public RuleCall getSpeciesSpeciesValidIDParserRuleCall_2_0_1() { return cSpeciesSpeciesValidIDParserRuleCall_2_0_1; }

		//("(" (arguments+=[Feature|ValidID] ("," arguments+=[Feature|ValidID])*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(arguments+=[Feature|ValidID] ("," arguments+=[Feature|ValidID])*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//arguments+=[Feature|ValidID]
		public Assignment getArgumentsAssignment_3_1_0() { return cArgumentsAssignment_3_1_0; }

		//[Feature|ValidID]
		public CrossReference getArgumentsFeatureCrossReference_3_1_0_0() { return cArgumentsFeatureCrossReference_3_1_0_0; }

		//ValidID
		public RuleCall getArgumentsFeatureValidIDParserRuleCall_3_1_0_0_1() { return cArgumentsFeatureValidIDParserRuleCall_3_1_0_0_1; }

		//("," arguments+=[Feature|ValidID])*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//arguments+=[Feature|ValidID]
		public Assignment getArgumentsAssignment_3_1_1_1() { return cArgumentsAssignment_3_1_1_1; }

		//[Feature|ValidID]
		public CrossReference getArgumentsFeatureCrossReference_3_1_1_1_0() { return cArgumentsFeatureCrossReference_3_1_1_1_0; }

		//ValidID
		public RuleCall getArgumentsFeatureValidIDParserRuleCall_3_1_1_1_0_1() { return cArgumentsFeatureValidIDParserRuleCall_3_1_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class JvmTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmTypeReference");
		private final RuleCall cJvmParameterizedTypeReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// override JvmTypeReference definition
		//JvmTypeReference:
		//	JvmParameterizedTypeReference;
		public ParserRule getRule() { return rule; }

		//JvmParameterizedTypeReference
		public RuleCall getJvmParameterizedTypeReferenceParserRuleCall() { return cJvmParameterizedTypeReferenceParserRuleCall; }
	}

	public class JvmParameterizedTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmParameterizedTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeJvmTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// override JvmParameterizedTypeReference definition
		//JvmParameterizedTypeReference:
		//	type=[JvmType|QualifiedName] ("[" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
		//	"]")?;
		public ParserRule getRule() { return rule; }

		//type=[JvmType|QualifiedName] ("[" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* "]")?
		public Group getGroup() { return cGroup; }

		//type=[JvmType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0_0() { return cTypeJvmTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1; }

		//(=> "[" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//arguments+=JvmArgumentTypeReference
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0() { return cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0; }

		//("," arguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//arguments+=JvmArgumentTypeReference
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0() { return cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	
	
	private ModelElements pModel;
	private NamespaceElements pNamespace;
	private ModelElementElements pModelElement;
	private ElementElements pElement;
	private AbstractComponentElements pAbstractComponent;
	private FakeAbstractComponentElements pFakeAbstractComponent;
	private PortElements pPort;
	private FakeAbstractPortElements pFakeAbstractPort;
	private ContentElementElements pContentElement;
	private FakeContentElementElements pFakeContentElement;
	private PartElements pPart;
	private FakePartElements pFakePart;
	private FeatureElements pFeature;
	private EcosystemElements pEcosystem;
	private ComponentElements pComponent;
	private SpeciesElements pSpecies;
	private ProvidedPortElements pProvidedPort;
	private RequiredPortElements pRequiredPort;
	private ComponentPartElements pComponentPart;
	private SpeciesPartElements pSpeciesPart;
	private BindingElements pBinding;
	private PortRefElements pPortRef;
	private SpeciesReferenceElements pSpeciesReference;
	private JvmTypeReferenceElements pJvmTypeReference;
	private JvmParameterizedTypeReferenceElements pJvmParameterizedTypeReference;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public SpeADLGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.irit.smac.may.speadl.SpeADL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	imports=XImportSection? elements+=Namespace*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Namespace:
	//	"namespace" name=QualifiedName "{" elements+=ModelElement* "}";
	public NamespaceElements getNamespaceAccess() {
		return (pNamespace != null) ? pNamespace : (pNamespace = new NamespaceElements());
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}

	//ModelElement:
	//	Namespace | Element;
	public ModelElementElements getModelElementAccess() {
		return (pModelElement != null) ? pModelElement : (pModelElement = new ModelElementElements());
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}

	//Element:
	//	Ecosystem | Component;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//AbstractComponent:
	//	Ecosystem | Species;
	public AbstractComponentElements getAbstractComponentAccess() {
		return (pAbstractComponent != null) ? pAbstractComponent : (pAbstractComponent = new AbstractComponentElements());
	}
	
	public ParserRule getAbstractComponentRule() {
		return getAbstractComponentAccess().getRule();
	}

	//FakeAbstractComponent returns AbstractComponent:
	//	name=ValidID parameters+=Feature typeParameters+=JvmTypeParameter specializes=JvmParameterizedTypeReference
	//	provides+=ProvidedPort requires+=RequiredPort parts+=Part species+=Species;
	public FakeAbstractComponentElements getFakeAbstractComponentAccess() {
		return (pFakeAbstractComponent != null) ? pFakeAbstractComponent : (pFakeAbstractComponent = new FakeAbstractComponentElements());
	}
	
	public ParserRule getFakeAbstractComponentRule() {
		return getFakeAbstractComponentAccess().getRule();
	}

	//Port:
	//	ProvidedPort | RequiredPort;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//FakeAbstractPort returns Port:
	//	typeReference=JvmParameterizedTypeReference;
	public FakeAbstractPortElements getFakeAbstractPortAccess() {
		return (pFakeAbstractPort != null) ? pFakeAbstractPort : (pFakeAbstractPort = new FakeAbstractPortElements());
	}
	
	public ParserRule getFakeAbstractPortRule() {
		return getFakeAbstractPortAccess().getRule();
	}

	//// Used to check for name duplicate!
	//ContentElement:
	//	Port | Part;
	public ContentElementElements getContentElementAccess() {
		return (pContentElement != null) ? pContentElement : (pContentElement = new ContentElementElements());
	}
	
	public ParserRule getContentElementRule() {
		return getContentElementAccess().getRule();
	}

	//FakeContentElement returns ContentElement:
	//	name=ValidID;
	public FakeContentElementElements getFakeContentElementAccess() {
		return (pFakeContentElement != null) ? pFakeContentElement : (pFakeContentElement = new FakeContentElementElements());
	}
	
	public ParserRule getFakeContentElementRule() {
		return getFakeContentElementAccess().getRule();
	}

	//Part:
	//	ComponentPart | SpeciesPart;
	public PartElements getPartAccess() {
		return (pPart != null) ? pPart : (pPart = new PartElements());
	}
	
	public ParserRule getPartRule() {
		return getPartAccess().getRule();
	}

	//FakePart returns Part:
	//	bindings+=Binding;
	public FakePartElements getFakePartAccess() {
		return (pFakePart != null) ? pFakePart : (pFakePart = new FakePartElements());
	}
	
	public ParserRule getFakePartRule() {
		return getFakePartAccess().getRule();
	}

	//Feature:
	//	name=ValidID ":" parameterType=JvmTypeReference;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//// another element is introduced here because SpeADLProposalProvider
	//// can't make the difference between specializes and implementedBy
	////ImplementedBy:
	////	"implementedBy" ref=JvmParameterizedTypeReference
	////;
	//Ecosystem:
	//	"ecosystem" name=ValidID ("[" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* "]")?
	//	("specializes" specializes=JvmParameterizedTypeReference)? //implementedBy=ImplementedBy?
	//	"{" (provides+=ProvidedPort | requires+=RequiredPort | parts+=ComponentPart | species+=Species)* "}";
	public EcosystemElements getEcosystemAccess() {
		return (pEcosystem != null) ? pEcosystem : (pEcosystem = new EcosystemElements());
	}
	
	public ParserRule getEcosystemRule() {
		return getEcosystemAccess().getRule();
	}

	//Component returns Ecosystem:
	//	"component" name=ValidID ("[" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* "]")?
	//	("specializes" specializes=JvmParameterizedTypeReference)? //implementedBy=ImplementedBy?
	//	"{" (provides+=ProvidedPort | requires+=RequiredPort | parts+=ComponentPart)* "}";
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//Species:
	//	"species" name=ValidID ("(" (parameters+=Feature ("," parameters+=Feature)*)? ")")? "{" (provides+=ProvidedPort |
	//	requires+=RequiredPort | parts+=Part)* "}";
	public SpeciesElements getSpeciesAccess() {
		return (pSpecies != null) ? pSpecies : (pSpecies = new SpeciesElements());
	}
	
	public ParserRule getSpeciesRule() {
		return getSpeciesAccess().getRule();
	}

	//ProvidedPort:
	//	"provides" name=ValidID ":" typeReference=JvmParameterizedTypeReference ("=" bound=PortRef)?;
	public ProvidedPortElements getProvidedPortAccess() {
		return (pProvidedPort != null) ? pProvidedPort : (pProvidedPort = new ProvidedPortElements());
	}
	
	public ParserRule getProvidedPortRule() {
		return getProvidedPortAccess().getRule();
	}

	//RequiredPort:
	//	"requires" name=ValidID ":" typeReference=JvmParameterizedTypeReference;
	public RequiredPortElements getRequiredPortAccess() {
		return (pRequiredPort != null) ? pRequiredPort : (pRequiredPort = new RequiredPortElements());
	}
	
	public ParserRule getRequiredPortRule() {
		return getRequiredPortAccess().getRule();
	}

	//ComponentPart:
	//	"part" name=ValidID ":" componentReference=JvmParameterizedTypeReference ("{" bindings+=Binding* "}")?;
	public ComponentPartElements getComponentPartAccess() {
		return (pComponentPart != null) ? pComponentPart : (pComponentPart = new ComponentPartElements());
	}
	
	public ParserRule getComponentPartRule() {
		return getComponentPartAccess().getRule();
	}

	//SpeciesPart:
	//	"use" name=ValidID ":" speciesReference=SpeciesReference ("{" bindings+=Binding* "}")?;
	public SpeciesPartElements getSpeciesPartAccess() {
		return (pSpeciesPart != null) ? pSpeciesPart : (pSpeciesPart = new SpeciesPartElements());
	}
	
	public ParserRule getSpeciesPartRule() {
		return getSpeciesPartAccess().getRule();
	}

	//Binding:
	//	"bind" from=[RequiredPort] "to" to=PortRef;
	public BindingElements getBindingAccess() {
		return (pBinding != null) ? pBinding : (pBinding = new BindingElements());
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//PortRef:
	//	ecosystem?="eco"? // I don't know why but without ()?, eco seems to be mandatory...
	//	(part=[Part|ValidID] ".")? port=[Port|ValidID];
	public PortRefElements getPortRefAccess() {
		return (pPortRef != null) ? pPortRef : (pPortRef = new PortRefElements());
	}
	
	public ParserRule getPortRefRule() {
		return getPortRefAccess().getRule();
	}

	//SpeciesReference:
	//	part=[ComponentPart|ValidID] "." species=[Species|ValidID] ("(" (arguments+=[Feature|ValidID] (","
	//	arguments+=[Feature|ValidID])*)? ")")?;
	public SpeciesReferenceElements getSpeciesReferenceAccess() {
		return (pSpeciesReference != null) ? pSpeciesReference : (pSpeciesReference = new SpeciesReferenceElements());
	}
	
	public ParserRule getSpeciesReferenceRule() {
		return getSpeciesReferenceAccess().getRule();
	}

	//// override JvmTypeReference definition
	//JvmTypeReference:
	//	JvmParameterizedTypeReference;
	public JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return (pJvmTypeReference != null) ? pJvmTypeReference : (pJvmTypeReference = new JvmTypeReferenceElements());
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//// override JvmParameterizedTypeReference definition
	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("[" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	"]")?;
	public JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return (pJvmParameterizedTypeReference != null) ? pJvmParameterizedTypeReference : (pJvmParameterizedTypeReference = new JvmParameterizedTypeReferenceElements());
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | ",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
